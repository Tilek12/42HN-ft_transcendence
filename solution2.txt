=========================================================================================

Recommended Major Modules:

1. Standard User Management (1)
2. Remote Players (1)
3. Live Chat (1)
4. Backend Framework (1)
5. 2FA + JWT (1)
6. Game Customization + Stats Dashboards (1 = 2 minors)
7. Frontend Toolkit + Database (1 = 2 minors)

Why These Modules?
	- Fastify: Easier than PHP for real-time apps.
	- SQLite: Simple, no server setup.
	- Tailwind: Quick styling without heavy CSS.
	- Reusability: Chat and Remote Players share WebSockets.
	- Avoid Hard Modules: Blockchain, AI, 3D graphics are time-consuming.

=========================================================================================

Task Division for 5 Team Members

Member	Responsibilities			Modules Covered

1	Backend (Fastify), Docker setup		Backend Framework, Docker
2	User Management (auth, profiles)	Standard User Management, 2FA+JWT
3	Game Logic (Pong, tournaments)		Remote Players, Game Customization
4	Live Chat & WebSockets			Live Chat, Stats Dashboard
5	Frontend (UI, Tailwind)			Frontend Toolkit, Accessibility (minor)

=========================================================================================

Detailed Task Breakdown per Team Member

	Team Member 1: Backend & Docker Lead

Modules Owned:
1. Major: Use a Framework for Backend (Fastify + Node.js)
	- Replace pure PHP with Fastify (Node.js) for API endpoints.
	- Set up WebSocket server for real-time features (game, chat).
	- Integrate SQLite (minor DB module) for data persistence.
2. Docker Setup (Mandatory)
	- Single-command container (docker-compose up).
	- Ensure compatibility with /goinfre (rootless constraints).
	- Include Node.js, SQLite, and any other dependencies.

Deliverables:
	- Fastify backend with REST API + WebSocket.
	- Dockerfile + docker-compose.yml.
	- SQLite schema (shared with Member 2).

Tech Stack: Fastify, Node.js, SQLite, Docker.

-----------------------------------------------------------------------------------------

	Team Member 2: Authentication & User Management

Modules Owned:
1. Major: Standard User Management
	- User registration/login (email/username).
	- Profile system (avatar upload, stats, friends list).
	- Match history (wins/losses, tournament records).
2. Major: Two-Factor Authentication (2FA) + JWT
	- Integrate Google Sign-In (remote auth).
	- Implement TOTP (Time-Based OTP) for 2FA.
	- Secure API routes with JWT.

Deliverables:
	- Auth endpoints (/register, /login, /2fa).
	- JWT middleware for protected routes.
	- User schema (SQLite).

Tech Stack: Fastify, JWT (jsonwebtoken), OAuth2 (Google), TOTP (speakeasy).

-----------------------------------------------------------------------------------------

	Team Member 3: Game Logic & Real-Time Play

Modules Owned:
1. Major: Remote Players
	- Extend local Pong to online multiplayer (WebSockets).
	- Handle latency, disconnections, and game state sync.

2. Minor: Game Customization Options
	- Add power-ups, custom maps, or paddle skins.
	- Ensure AI (if added) can use power-ups.

Deliverables:
	- WebSocket game server (integrates with Fastify).
	- Pong game logic (ball physics, scoring).
	- Customization UI (dropdowns for power-ups).

Tech Stack: WebSocket (ws/socket.io), TypeScript, Canvas API.

-----------------------------------------------------------------------------------------

	Team Member 4: Live Chat & Notifications

Modules Owned:
1. Major: Live Chat
	- Direct messaging between users.
	- Blocking system (hide messages from blocked users).
	- Game invites via chat.

2. Minor: User and Game Stats Dashboards
	- Charts for win/loss ratios, match history.
	- Leaderboard for tournaments.

Deliverables:
	- Chat UI (message list, input field).
	- WebSocket event handlers for chat.
	- Stats dashboard (Chart.js or similar).

Tech Stack: WebSocket, Chart.js, Tailwind CSS.

-----------------------------------------------------------------------------------------

	Team Member 5: Frontend & UI

Modules Owned:
1. Minor: Frontend Toolkit (Tailwind CSS)
	- Style all pages (login, game, chat, dashboard).
	- Ensure SPA navigation (back/forward buttons work).
2. Minor: Accessibility (Visually Impaired Support)
	- Screen reader compatibility.
	- High-contrast mode, keyboard navigation.

Deliverables:
	- Responsive UI (works on mobile/desktop).
	- Accessible components (ARIA labels, focus management).
	- Tailwind theme config.

Tech Stack: TypeScript, Tailwind CSS, React/Vue (optional).

=========================================================================================

Timeline Suggestions

1. Week 1:
	- Member 1 sets up Fastify + Docker.
	- Member 2 builds auth endpoints.
	- Member 5 creates basic UI skeleton.

2. Week 2:
	- Member 3 implements local Pong.
	- Member 4 designs chat UI.

3. Week 3:
	- Member 1 integrates WebSockets.
	- Member 3 extends Pong to multiplayer.

4. Week 4:
	- Member 2 adds 2FA.
	- Member 4 connects chat to WebSockets.

5. Week 5:
	- Polish UI (Member 5).
	- Testing & bug fixes (all).

=========================================================================================

Project Structure

Root Structure:

ft_transcendence/
├── backend/                 # Fastify (Node.js)
├── frontend/                # TypeScript + Tailwind
├── docker/                  # Docker configs
├── docs/                    # Project documentation
├── .env                     # Environment variables
└── README.md                # Setup guide

-----------------------------------------------------------------------------------------

1. Backend (/backend)

backend/
├── src/
│   ├── app.ts               # Fastify server setup
│   ├── config/              # Config files (JWT, DB)
│   │   ├── db.ts            # SQLite connection
│   │   └── auth.ts          # JWT & 2FA config
│   │
│   ├── modules/
│   │   ├── auth/            # User Management + 2FA
│   │   │   ├── routes.ts    # /register, /login, /2fa
│   │   │   └── service.ts   # User CRUD logic
│   │   │
│   │   ├── game/            # Pong logic
│   │   │   ├── pong.ts      # Ball/paddle physics
│   │   │   ├── matchmaking.ts # Tournament system
│   │   │   └── sockets.ts   # WebSocket handlers
│   │   │
│   │   ├── chat/            # Live Chat
│   │   │   ├── routes.ts    # Message endpoints
│   │   │   └── sockets.ts   # Real-time messaging
│   │   │
│   │   └── stats/           # Stats Dashboard
│   │       └── service.ts   # Win/loss analytics
│   │
│   ├── types/               # TypeScript interfaces
│   └── utils/               # Helpers (e.g., API responses)
│
├── test/                    # API + WebSocket tests
└── package.json             # Node.js dependencies

-----------------------------------------------------------------------------------------

2. Frontend (/frontend)

frontend/
├── public/                  # Static assets
│   ├── index.html           # Entry point
│   └── assets/              # Images, fonts
│
├── src/
│   ├── main.ts              # App initialization
│   ├── App.vue (or App.tsx) # Root component
│   │
│   ├── modules/
│   │   ├── auth/            # Login/register UI
│   │   ├── game/            # Pong canvas + controls
│   │   ├── chat/            # Chat interface
│   │   ├── profile/         # User stats dashboard
│   │   └── tournament/      # Bracket view
│   │
│   ├── stores/              # State management (e.g., Pinia)
│   ├── styles/              # Tailwind/global CSS
│   └── utils/               # Frontend helpers
│
├── tailwind.config.js       # Tailwind setup
└── package.json

-----------------------------------------------------------------------------------------

3. Docker (/docker)

docker/
├── Dockerfile               # Node.js + Frontend build
├── docker-compose.yml       # Services (backend, frontend, DB)
└── nginx/                   # Reverse proxy config
    └── default.conf         # HTTPS + SPA routing

-----------------------------------------------------------------------------------------

Why This Structure?
	- Separation of concerns: Clean split between backend/frontend.
	- Reusable modules: WebSockets serve both game and chat.
	- Scalable: Easy to add new features (e.g., 3D graphics later).
	- Team-friendly: Each member owns a clear directory.

=========================================================================================
