=========================================================================================

Modules to include definitely:
1. Major (1):	Use a framework to build the backend.
2. Minor (0,5):	Use a framework or a toolkit to build the frontend.
3. Minor (0,5): Use a database for the backend.
4. Major (1):	Standard user management, authentication, users across tournaments.
5. Major (1):	Remote players.
6. Major (1):	Implement Two-Factor Authentication (2FA) and JWT.
7. Major (1):	Replace basic Pong with server-side Pong and implement an API.

-----------------------------------------------------------------------------------------

Modules to choose:
- Major (1):	Use advanced 3D techniques.
- Minor (0,5):	Support on all devices.
- Minor (0,5):	Expanding browser compatibility.
- Minor (0,5):	Supports multiple languages.
- Minor (0,5):	Game customization options.

=========================================================================================

Project Structure Overview

ft_transcendence/
├── backend/                 # Fastify/Node.js backend
│   ├── src/
│   │   ├── auth/            # Authentication (JWT, 2FA)
│   │   ├── game/            # Server-side Pong logic
│   │   ├── user/            # User management
│   │   ├── api/             # API routes
│   │   └── database/        # SQLite integration
├── frontend/                # TypeScript + Tailwind CSS
│   ├── src/
│   │   ├── components/      # UI components
│   │   ├── pages/           # Application pages
│   │   ├── game/            # Game components
│   │   └── services/        # API clients
├── docker/                  # Docker configurations
├── docs/                    # Documentation
└── scripts/                 # Utility scripts

=========================================================================================

Team Division and Responsibilities

1. Backend Core & API Specialist

Modules:
	- Major: Use Fastify/Node.js for backend
	- Major: Server-side Pong with (partial)

Technical Scope:
	- Set up Fastify backend infrastructure
	- Implement core game logic (ball physics, scoring)
	- Design RESTful API endpoints
	- Docker container configuration
	- Basic websocket setup for real-time updates

Key Deliverables:
	- Functional game API
	- Working Docker deployment
	- Core game mechanics

-----------------------------------------------------------------------------------------

2. Frontend & UI Developer

Modules:
	- Minor: Frontend framework (Tailwind CSS)
	- Minor: Support on all devices
	- Minor: Expanding browser compatibility
	- Minor: Game customization options

Technical Scope:
	- Implement responsive UI with Tailwind
	- Create game interface components
	- Handle browser compatibility issues
	- User settings panel for game customization
	- Theme management

Key Deliverables:
	- Responsive game interface
	- Cross-browser compatible UI
	- Customization options panel

-----------------------------------------------------------------------------------------

3. Authentication & User Management

Modules:
	- Major: Standard user management
	- Major: 2FA and JWT
	- Minor: Multiple language support (i18n)

Technical Scope:
	- User registration/login system
	- JWT token implementation
	- 2FA setup (TOTP with Google Authenticator)
	- Session management
	- Basic i18n implementation

Key Deliverables:
	- Secure authentication flow
	- Working 2FA implementation
	- Language switcher component

-----------------------------------------------------------------------------------------

4. Multiplayer & Networking Engineer

Modules:
	- Major: Remote players
	- Major: Server-side Pong with API (partial)

Technical Scope:
	- WebSocket implementation
	- Real-time game synchronization
	- Network lag compensation
	- Matchmaking system
	- Disconnection handling

Key Deliverables:
	- Working multiplayer matches
	- Stable network synchronization
	- Matchmaking queue

-----------------------------------------------------------------------------------------

5. Database & Game State Manager

Modules:
	- Minor: Database (SQLite)
	- Major: Standard user management (data layer)
	- Major: Server-side Pong (persistence)

Technical Scope:
	- Database schema design
	- User data persistence
	- Game state storage
	- Match history recording
	- Data validation

Key Deliverables:
	- Optimized database structure
	- Persistent user profiles
	- Match history system

=========================================================================================

Suggested Timeline (8 Weeks)

Week 1-2: Foundation
	- All: Set up Git, Docker, project structure
	- Backend Core: Basic API endpoints
	- Auth: User model and registration
	- Frontend: Basic UI skeleton

Week 3-4: Core Features
	- Backend Core: Game physics
	- Multiplayer: Websocket connection
	- Database: Schema implementation
	- Frontend: Game interface

Week 5-6: Advanced Features
	- Auth: Implement 2FA
	- Multiplayer: Matchmaking
	- Database: Match history
	- Frontend: Customization options

Week 7-8: Polish & Integration
	- All: Cross-component testing
	- Frontend: Responsiveness polish
	- Auth: Language support
	- Final Docker deployment

=========================================================================================
