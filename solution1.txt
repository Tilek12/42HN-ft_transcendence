=========================================================================================

✅ Recommended 7 Major Modules (Easy + Safe Path)

Module					Type	Points	Reason

1. Standard User Management		Major	1.0	Needed for auth, profiles, match history
2. Remote Players			Major	1.0	Needed for real online gameplay
3. Live Chat				Major	1.0	Easy via WebSocket, enhances UX
4. 2FA + JWT Auth			Major	1.0	Enhances security and real-world auth
5. Tailwind CSS				Minor	0.5	Lightweight styling tool for frontend
6. SQLite DB				Minor	0.5	Easy to integrate, supports persistence
7. Game Customization			Minor	0.5	Sliders/settings for power-ups, etc.
8. Stats Dashboards			Minor	0.5	Simple charts from game/user data
9. Multilingual Support			Minor	0.5	Translate strings via JSON files
10. Accessibility (Visually Impaired)	Minor	0.5	Add alt-text, keyboard nav, contrast

🎯 Total (4 Major + 6 Minor): 			7 points

=========================================================================================

🧠 Why This Is the Best Strategy

✔️ Aligns Naturally With Mandatory Part
	- Mandatory already includes matchmaking, user aliases, and Pong.
	- Adding User Management, SQLite, Stats, Customization, Chat, and Remote Play extends the core logically.

✔️ Easy Learning Curve for Team of 5
	- No heavy DevOps (ELK, Prometheus), 3D, or Blockchain.
	- Avoids major redesigns (like server-authoritative Pong or CLI clients).

✔️ Modular, Assignable, and Testable
	- Each module can be developed independently, ideal for parallel work.
	- Team members can own end-to-end features.

=========================================================================================

🧱 Suggested Project Structure (Monorepo)

ft_transcendence/
│
├── backend/
│   ├── src/
│   │   ├── auth/               # JWT, 2FA logic
│   │   ├── users/              # User profile, stats
│   │   ├── db/                 # SQLite schema and access
│   │   └── game/               # Game state + remote player logic
│   └── main.ts
│
├── frontend/
│   ├── src/
│   │   ├── assets/
│   │   ├── components/
│   │   ├── pages/
│   │   ├── styles/             # Tailwind CSS
│   │   ├── i18n/               # Multilingual support
│   │   ├── chat/               # Live chat UI
│   │   └── App.tsx
│   └── index.html
│
├── docker/
│   ├── Dockerfile.frontend
│   ├── Dockerfile.backend
│   └── docker-compose.yml
│
├── shared/
│   └── types/                  # Shared types/interfaces
│
├── .env.example
├── README.md
└── Makefile

=========================================================================================

👥 Division of Work Among 5 Members

===== MEMBER 1 — Gameplay & Remote Pong =====
Focus: Core game logic and multiplayer over WebSocket

🔧 Tasks:
	- Implement Pong game in canvas (HTML5)
	- Add customization settings: paddle speed, ball size, power-ups
	- Implement real-time sync using WebSocket (remote players)
	- Handle latency/disconnection cases
	- Integrate with user profiles and match system

📦 Modules:
	- ✅ Remote Players (Major)
	- ✅ Game Customization Options (Minor)

-----------------------------------------------------------------------------------------

	MEMBER 2 — Authentication & Security
Focus: JWT & 2FA + secure routes

🔧 Tasks:
	- Implement user registration/login with hashed passwords
	- Generate and verify JWTs for secure sessions
	- Implement 2FA (email or app-based)
	- Secure protected routes (backend API)
	- Token expiry, refresh tokens (optional)

📦 Modules:
	- ✅ 2FA + JWT Authentication (Major)

-----------------------------------------------------------------------------------------

	MEMBER 3 — User Management & Database
Focus: Profiles, avatars, match history, SQLite integration

🔧 Tasks:
	- Create and update user profiles (with avatars)
	- Match history table + storage in SQLite
	- Wins/losses stats handling
	- Friend system with online status
	- DB schema + ORM (e.g., Prisma or TypeORM)

📦 Modules:
	- ✅ Standard User Management (Major)
	- ✅ SQLite DB (Minor)

-----------------------------------------------------------------------------------------

	MEMBER 4 — Frontend Design & Internationalization
Focus: Tailwind UI + multilingual and accessibility

🔧 Tasks:
	- Design UI layout and components with Tailwind CSS
	- Add responsive design (mobile/desktop)
	- Add language switcher (at least 3 languages)
	- Translate static text via JSON files
	- Add screen-reader support, high contrast mode, keyboard nav

📦 Modules:
	- ✅ Tailwind CSS (Minor)
	- ✅ Multilingual Support (Minor)
	- ✅ Accessibility for Visually Impaired (Minor)

-----------------------------------------------------------------------------------------

	MEMBER 5 — Live Chat & Stats Dashboard
Focus: Chat between users + game/user stats UI

🔧 Tasks:
	- Implement chat system (WebSocket): DM, block, invite to game
	- Integrate chat with tournament system
	- Show notifications in chat
	- Build dashboard for user and game stats (using Chart.js or similar)
	- Pull data from DB and show clean UI for analytics

📦 Modules:
	- ✅ Live Chat (Major)
	- ✅ User/Game Stats Dashboards (Minor)

=========================================================================================

📌 Summary Table

Team Member	Responsibilities				Modules Covered

MEMBER 1	Game engine, multiplayer sync, customization	Remote Players, Game Customization
MEMBER 2	Login, JWT, 2FA, secure auth			2FA + JWT Auth
MEMBER 3	User profiles, DB, match history		User Management, SQLite
MEMBER 4	Tailwind UI, multilingual, accessibility	Tailwind, Multilingual, Accessibility
MEMBER 5	Live chat system, stats dashboard		Live Chat, Stats Dashboard

=========================================================================================
