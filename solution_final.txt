=========================================================================================

Modules:

1. Standard User Management (1)
2. Remote Players (1)
3. Live Chat (1)
4. Backend Framework (1)
5. 2FA + JWT (1)
6. Game Customization + Stats Dashboards (1 = 2 minors)
7. Frontend Toolkit + Database (1 = 2 minors)

-----------------------------------------------------------------------------------------

Key Decisions:
✅ Use a backend (Fastify + Node.js) – Required for auth, chat, and multiplayer.
✅ Vue 3 + TypeScript – Easier than React for beginners.
✅ SQLite – No complex DB setup.
✅ Tailwind CSS – Avoid writing raw CSS.
✅ 1-command Docker – Simplifies deployment.

=========================================================================================

Final Project Structure (Simple & Organized)

ft_transcendence/
├── backend/                  # Node.js (Fastify)
│   ├── src/
│   │   ├── auth/             # JWT, Google login
│   │   ├── game/             # Pong WebSocket logic
│   │   ├── chat/             # Live chat messages
│   │   ├── db/               # SQLite (users, matches)
│   │   └── server.ts         # Fastify setup
│   └── package.json
│
├── frontend/                 # Vue 3 + TypeScript
│   ├── src/
│   │   ├── views/            # Pages
│   │   │   ├── Login.vue     # Auth screen
│   │   │   ├── Game.vue      # Pong canvas
│   │   │   └── Chat.vue      # Chat interface
│   │   │
│   │   ├── components/       # Reusable UI
│   │   ├── stores/           # Pinia (global state)
│   │   └── main.ts           # Vue app entry
│   └── package.json
│
├── docker-compose.yml        # Runs backend + frontend
└── README.md                 # Setup guide

=========================================================================================

Team Roles & Modules Breakdown

1. Backend & Docker Lead

Member: Most experienced with Node.js

Tasks:
	- Set up Fastify backend + WebSocket server.
	- Dockerize the app (docker-compose.yml).
	- Help others connect frontend to backend APIs.

Modules Covered:
	- Backend Framework (Major) – Fastify
	- Database (Minor) – SQLite

-----------------------------------------------------------------------------------------

2. Authentication & User Profiles

Member: Focuses on security/data

Tasks:
	- JWT login/register.
	- Google Sign-In integration.
	- User profiles (avatars, stats).

Modules Covered:
	- Standard User Management (Major)
	- 2FA + JWT (Major)

-----------------------------------------------------------------------------------------

3. Game Logic Developer

Member: Works on Pong mechanics

Tasks:
	- Canvas-based Pong game.
	- WebSocket multiplayer sync.
	- Tournament matchmaking.

Modules Covered:
	- Remote Players (Major)
	- Game Customization (Minor)

-----------------------------------------------------------------------------------------

4. Frontend & UI Developer

Member: Handles Vue + design

Tasks:
	- Build login/game/chat screens.
	- Make it responsive (Tailwind).
	- Add accessibility (screen readers).

Modules Covered:
	- Tailwind CSS (Minor)
	- Accessibility (Minor)

-----------------------------------------------------------------------------------------

5. Chat & Stats Developer

Member: Works on real-time features

Tasks:
	- Live chat (WebSocket).
	- User blocking + game invites.
	- Stats dashboard (Chart.js).

Modules Covered:
	- Live Chat (Major)
	- Stats Dashboard (Minor)

-----------------------------------------------------------------------------------------

Timeline (5 Weeks)

Week 1: Setup & Learning
	- Learn basics of Fastify + Vue.
	- Dockerize a "Hello World" app.

Week 2: Auth & Backend
	- JWT login/register.
	- SQLite DB setup.

Week 3: Pong Game (Local First)
	- Canvas Pong (single-player).
	- Connect to WebSocket.

Week 4: Multiplayer + Chat
	- Online Pong matches.
	- Basic chat UI.

Week 5: Polish & Testing
	- Stats dashboard.
	- Fix bugs, improve UI.

=========================================================================================

Why This Works?

1. Minimal Complexity
	- Fastify is simpler than Express/Nest.js.
	- Vue is easier than React for beginners.

2. Clear Responsibilities
	- Each member owns a specific area (no overlap).

3. Gradual Learning
	- Week 1: Basics → Week 5: Advanced features.

4. No Unnecessary Tech
	- Avoids blockchain, AI, microservices.
