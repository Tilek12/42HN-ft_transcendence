=========================================================================================

✅ Mandatory Part Requirements:

1. Basic Pong Game: Real-time multiplayer Pong with tournament system, matchmaking,
	and local play (same keyboard).
2. Single-Page Application (SPA): Must work in Firefox, no unhandled errors.
3. Docker: Single command to run the entire project.
4. Security: HTTPS, password hashing, SQL/XSS protection, input validation.
5. Tech Stack:
	- Backend: Pure PHP (unless overridden by a module).
	- Frontend: TypeScript (can be modified by modules).

=========================================================================================

✅ Objective

We need 7 major modules total, where:
	1 Major module = 1 point
	2 Minor modules = 1 Major = 1 point

We must choose a combination totaling 7 points, and optimize for ease of implementation,
compatibility with the mandatory part, and team efficiency (5 members).

=========================================================================================

🔍 MODULE DIFFICULTY RATINGS

Each module is rated as:

🟩 Easy
🟨 Medium
🟥 Hard

#	Module					Type	Difficulty	Why?

1	Use backend framework (Fastify)		Major	🟨 Medium	Adds backend complexity; not mandatory
2	Use Tailwind CSS			Minor	🟩 Easy		Simple, helpful in frontend styling
3	Use SQLite DB				Minor	🟩 Easy		Easy integration with backend
4	Blockchain storage			Major	🟥 Hard		Requires Solidity + Avalanche + smart contract
5	Standard User Management		Major	🟩 Easy		Needed anyway, solid base
6	Remote Authentication (Google)		Major	🟨 Medium	API setup, token exchange
7	Remote Players				Major	🟨 Medium	Needs WebSockets, but manageable
8	Multiplayer > 2 players			Major	🟥 Hard		Complex rules and gameplay sync
9	Add another game			Major	🟥 Hard		Extra game logic, matchmaking
10	Game customization			Minor	🟩 Easy		Simple optional settings
11	Live chat				Major	🟩 Easy		Common WebSocket use case
12	AI opponent				Major	🟥 Hard		AI prediction + keyboard input sim
13	Stats dashboards			Minor	🟩 Easy		Can use Chart.js, not critical path
14	WAF/ModSecurity + Vault			Major	🟥 Hard		Complex infra config, DevOps-heavy
15	GDPR compliance				Minor	🟨 Medium	Legal complexity, data removal logic
16	2FA + JWT				Major	🟨 Medium	Secure auth setup, but realistic
17	ELK logging system			Major	🟥 Hard		Complex infra with Logstash/Kibana
18	Prometheus/Grafana monitoring		Minor	🟥 Hard		Advanced DevOps stack
19	Microservices backend			Major	🟥 Hard		Very complex for 5-person student project
20	Advanced 3D graphics (Babylon.js)	Major	🟥 Hard		3D engine, complex rendering
21	Mobile/Device support			Minor	🟩 Easy		Use responsive CSS
22	Browser compatibility			Minor	🟩 Easy		Browser testing
23	Multiple language support		Minor	🟩 Easy		Language JSON files, toggle logic
24	Accessibility (visually impaired)	Minor	🟩 Easy		alt-text, contrast, screen reader
25	Server-side Pong + API			Major	🟥 Hard		Requires re-architecting Pong engine
26	CLI Pong against Web			Major	🟥 Hard		LI-client sync + API integration

=========================================================================================

✅ Filtered: Easy Modules

We now choose only modules marked 🟩 Easy or 🟨 Medium (for manageable ones),
and avoid all 🟥 Hard modules.

=========================================================================================

ORM - Type ORM
MVC
API
WebSocket
